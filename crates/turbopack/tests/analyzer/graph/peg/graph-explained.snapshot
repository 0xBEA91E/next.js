*anonymous function 10063* = (...) => "OR"

*anonymous function 10191* = (...) => "NOT"

*anonymous function 10795* = (...) => {"type": "identifier", "name": name}

*anonymous function 11186* = (...) => (head + tail["join"](""))

*anonymous function 11338* = (...) => {"type": "parameter_name", "name": text()}

*anonymous function 11667* = (...) => text()

*anonymous function 11724* = (...) => seq

*anonymous function 11889* = (...) => ""

*anonymous function 12015* = (...) => ""

*anonymous function 12141* = (...) => "
"

*anonymous function 12267* = (...) => ""

*anonymous function 12393* = (...) => "	"

*anonymous function 12448* = (...) => text()

*anonymous function 12576* = (...) => FreeVar(String)["fromCharCode"](FreeVar(parseInt)(digits, 16))

*anonymous function 1270* = (...) => "any character"

*anonymous function 12828* = (...) => v

*anonymous function 12891* = (...) => {"property": property, "alias": alias}

*anonymous function 12976* = (...) => expression

*anonymous function 13047* = (...) => {"type": "array_subquery_expression", "expression": expression}

*anonymous function 13180* = (...) => {"type": "exists_subquery_expression", "expression": expression}

*anonymous function 13314* = (...) => {"type": "scalar_subquery_expression", "expression": expression}

*anonymous function 1342* = (...) => "end of input"

*anonymous function 13448* = (...) => {"property": property, "computed": false}

*anonymous function 13542* = (...) => {"property": property, "computed": true}

*anonymous function 13635* = (...) => tail["reduce"](*arrow function 13693*, head)

*anonymous function 13890* = (...) => {"type": "scalar_unary_expression", "operator": operator, "argument": argument}

*anonymous function 1415* = (...) => expectation["description"]

*anonymous function 14187* = (...) => {
    "type": "scalar_conditional_expression",
    "test": test,
    "consequent": consequent,
    "alternate": alternate
}

*anonymous function 14447* = (...) => buildBinaryExpression(head, tail)

*anonymous function 15046* = (...) => {"type": "scalar_in_expression", "value": value, "list": list}

*anonymous function 15184* = (...) => {"type": "scalar_between_expression", "value": value, "begin": begin, "end": end}

*anonymous function 15996* = (...) => {"key": key, "value": value}

*anonymous function 16071* = (...) => {"type": "collection_expression", "expression": expression}

*anonymous function 16200* = (...) => tail["reduce"](*arrow function 16258*, head)

*anonymous function 16459* = (...) => {"type": "collection_subquery_expression", "expression": expression}

*anonymous function 16597* = (...) => {"type": "top_specification", "value": value}

*anonymous function 16712* = (...) => {"type": "number_constant", "value": FreeVar(Number)(text())}

*anonymous function 16836* = (...) => ???*0*
- *0* unsupported expression

*anonymous function 16924* = (...) => subquery

*anonymous function 1821* = (...) => `\x0${hex(ch)}`

*anonymous function 1919* = (...) => `\x${hex(ch)}`

*anonymous function 2286* = (...) => `\x0${hex(ch)}`

*anonymous function 2384* = (...) => `\x${hex(ch)}`

*anonymous function 3851* = (...) => {"type": "sql", "body": body}

*anonymous function 3948* = (...) => v

*anonymous function 3999* = (...) => v

*anonymous function 4063* = (...) => v

*anonymous function 4133* = (...) => v

*anonymous function 4210* = (...) => {
    "type": "select_query",
    "top": top,
    "select": select,
    "from": from,
    "where": where,
    "orderBy": orderBy
}

*anonymous function 4473* = (...) => {"type": "select_specification", "*": true}

*anonymous function 4588* = (...) => {"type": "select_specification", "properties": properties}

*anonymous function 4715* = (...) => {"type": "select_specification", "value": value}

*anonymous function 4901* = (...) => v

*anonymous function 4959* = (...) => {"type": "object_property_list", "properties": ???*0*}
- *0* spread is not supported

*anonymous function 5103* = (...) => v

*anonymous function 5163* = (...) => {"type": "from_specification", "source": source, "joins": joins}

*anonymous function 5302* = (...) => {"type": "from_source", "expression": expression, "alias": alias, "iteration": true}

*anonymous function 5467* = (...) => v

*anonymous function 5531* = (...) => {"type": "from_source", "expression": expression, "alias": alias}

*anonymous function 5671* = (...) => {"type": "filter_condition", "condition": condition}

*anonymous function 5792* = (...) => {"type": "sort_specification", "expressions": ???*0*}
- *0* spread is not supported

*anonymous function 5935* = (...) => {"type": "sort_expression", "expression": expression, "order": order}

*anonymous function 624* = (...) => ???*0*
- *0* unsupported expression

*anonymous function 6286* = (...) => {"type": "scalar_function_expression", "name": name, "arguments": args, "udf": true}

*anonymous function 6457* = (...) => {"type": "scalar_function_expression", "name": name, "arguments": args}

*anonymous function 6747* = (...) => {"type": "scalar_object_expression", "properties": ???*0*}
- *0* unsupported expression

*anonymous function 701* = (...) => `"${literalEscape(expectation["text"])}"`

*anonymous function 7045* = (...) => {"type": "scalar_array_expression", "elements": elements}

*anonymous function 7256* = (...) => {"type": "undefined_constant"}

*anonymous function 7336* = (...) => {"type": "null_constant"}

*anonymous function 7411* = (...) => {"type": "boolean_constant", "value": false}

*anonymous function 7526* = (...) => {"type": "boolean_constant", "value": true}

*anonymous function 7868* = (...) => {"type": "number_constant", "value": ???*0*}
- *0* unsupported expression

*anonymous function 803* = (...) => `[${???*0*}${escapedParts}]`
- *0* unsupported expression

*anonymous function 8138* = (...) => {"type": "string_constant", "value": chars["join"]("")}

*anonymous function 8335* = (...) => {"type": "array_constant", "elements": ???*0*}
- *0* spread is not supported

*anonymous function 8471* = (...) => {"type": "object_constant", "properties": ???*0*}
- *0* spread is not supported

*anonymous function 9681* = (...) => "ASC"

*anonymous function 9810* = (...) => "DESC"

*anonymous function 9938* = (...) => "AND"

*arrow function 13693* = (...) => ???*0*
- *0* unsupported expression

*arrow function 16258* = (...) => ???*0*
- *0* unsupported expression

*arrow function 169160* = (...) => ???*0*
- *0* unsupported expression

DESCRIBE_EXPECTATION_FNS = {
    "literal": *anonymous function 701*,
    "class": *anonymous function 803*,
    "any": *anonymous function 1270*,
    "end": *anonymous function 1342*,
    "other": *anonymous function 1415*
}

alias#33 = arguments[0]

alias#35 = arguments[1]

alias#52 = arguments[1]

alternate = arguments[2]

args#39 = arguments[1]

args#40 = arguments[1]

argument = arguments[1]

begin = arguments[1]

body = arguments[0]

buildBinaryExpression = (...) => tail["reduce"](*arrow function 169160*, head)

ch#10 = arguments[0]

ch#12 = arguments[0]

ch#13 = arguments[0]

ch#15 = arguments[0]

ch#16 = arguments[0]

chars = arguments[0]

child = arguments[0]

classEscape = (...) => ...[...](..., ...)["replace"](/\]/g, "\]")["replace"](/\^/g, "\^")["replace"](/-/g, "\-")["replace"](/\0/g, "\0")["replace"](/\t/g, "\t")["replace"](/\n/g, "\n")["replace"](/\r/g, "\r")["replace"](/[\x00-\x0F]/g, *anonymous function 2286*)["replace"](/[\x10-\x1F\x7F-\x9F]/g, *anonymous function 2384*)

condition = arguments[0]

consequent = arguments[1]

ctor = (...) => FreeVar(undefined)

describeExpectation = (...) => DESCRIBE_EXPECTATION_FNS[expectation["type"]](expectation)

describeExpected = (...) => (descriptions[0] | `${descriptions[0]} or ${descriptions[1]}` | ???*0*)
- *0* unsupported expression

describeFound = (...) => ???*0*
- *0* unsupported expression

description#74 = arguments[0]

description#78 = arguments[0]

descriptions = ???*0*
- *0* new expression are not supported

details = (
  | peg$posDetailsCache[pos]
  | peg$posDetailsCache[p]
  | {"line": details["line"], "column": details["column"]}
)

digits = arguments[0]

elements = arguments[0]

end = arguments[2]

endPos = arguments[1]

endPosDetails = peg$computePosDetails(endPos)

error = (...) => FreeVar(undefined)

escapedParts = ""

expectation#17 = arguments[0]

expectation#5 = arguments[0]

expectation#6 = arguments[0]

expectation#7 = arguments[0]

expectation#8 = arguments[0]

expectation#9 = arguments[0]

expected#18 = arguments[0]

expected#20 = (...) => FreeVar(undefined)

expected#3 = arguments[1]

expected#4 = arguments[0]

expected#81 = arguments[0]

expected#83 = arguments[0]

expression#33 = arguments[1]

expression#34 = arguments[0]

expression#35 = arguments[0]

expression#38 = arguments[0]

expression#53 = arguments[0]

expression#54 = arguments[0]

expression#55 = arguments[0]

expression#56 = arguments[0]

expression#67 = arguments[0]

expression#70 = arguments[0]

found#19 = arguments[0]

found#3 = arguments[2]

found#4 = arguments[1]

found#83 = arguments[1]

from#24 = arguments[2]

from#25 = arguments[2]

from#26 = arguments[2]

head#176 = arguments[0]

head#29 = arguments[0]

head#30 = arguments[0]

head#37 = arguments[0]

head#41 = arguments[0]

head#45 = arguments[0]

head#46 = arguments[0]

head#48 = arguments[0]

head#57 = arguments[0]

head#58 = arguments[0]

head#59 = arguments[0]

head#63 = arguments[0]

head#68 = arguments[0]

head#72 = arguments[0]

hex#4 = (...) => ch["charCodeAt"](0)["toString"](16)["toUpperCase"]()

hex#43 = arguments[0]

i#18 = (???*0* | 0 | 1)
- *0* i
  ⚠️  pattern without value

i#6 = (???*0* | 0)
- *0* i
  ⚠️  pattern without value

ignoreCase#76 = arguments[1]

ignoreCase#77 = arguments[2]

input = arguments[0]

inverted = arguments[1]

j = (???*0* | 1)
- *0* j
  ⚠️  pattern without value

joins = arguments[1]

key = arguments[0]

left = ???*0*
- *0* left
  ⚠️  pattern without value

list = arguments[1]

literalEscape = (...) => s["replace"](/\\/g, "\\")["replace"](/"/g, "\"")["replace"](/\0/g, "\0")["replace"](/\t/g, "\t")["replace"](/\n/g, "\n")["replace"](/\r/g, "\r")["replace"](/[\x00-\x0F]/g, *anonymous function 1821*)["replace"](/[\x10-\x1F\x7F-\x9F]/g, *anonymous function 1919*)

location#20 = (...) => peg$computeLocation(peg$savedPos, peg$currPos)

location#3 = arguments[3]

location#74 = (arguments[1] | ???*0*)
- *0* unsupported expression

location#75 = (arguments[1] | ???*0*)
- *0* unsupported expression

location#82 = arguments[1]

location#83 = arguments[2]

message#3 = arguments[0]

message#75 = arguments[0]

message#82 = arguments[0]

name#39 = arguments[0]

name#40 = arguments[0]

name#47 = arguments[0]

object#60 = ???*0*
- *0* object
  ⚠️  pattern without value

object#69 = ???*0*
- *0* object
  ⚠️  pattern without value

operator#177 = ???*0*
- *0* operator
  ⚠️  pattern without value

operator#61 = arguments[0]

options = (arguments[1] | ???*0*)
- *0* unsupported expression

order = arguments[1]

orderBy = arguments[4]

p = (???*0* | ???*1*)
- *0* p
  ⚠️  pattern without value
- *1* unsupported expression

parent = arguments[1]

parts = arguments[0]

peg$FAILED = {}

peg$SyntaxError = (...) => FreeVar(undefined)

peg$anyExpectation = (...) => {"type": "any"}

peg$buildSimpleError = (...) => ???*0*
- *0* new expression are not supported

peg$buildStructuredError = (...) => ???*0*
- *0* new expression are not supported

peg$c0 = *anonymous function 3851*

peg$c1 = *anonymous function 3948*

peg$c10 = *anonymous function 4715*

peg$c100 = peg$literalExpectation("NOT", true)

peg$c101 = *anonymous function 10191*

peg$c102 = "between"

peg$c103 = peg$literalExpectation("BETWEEN", true)

peg$c104 = "exists"

peg$c105 = peg$literalExpectation("EXISTS", true)

peg$c106 = "array"

peg$c107 = peg$literalExpectation("ARRAY", true)

peg$c108 = "null"

peg$c109 = peg$literalExpectation("null", false)

peg$c11 = ","

peg$c110 = "true"

peg$c111 = peg$literalExpectation("true", false)

peg$c112 = "false"

peg$c113 = peg$literalExpectation("false", false)

peg$c114 = "udf"

peg$c115 = peg$literalExpectation("udf", false)

peg$c116 = *anonymous function 10795*

peg$c117 = /^[a-zA-Z_]/

peg$c118 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false)

peg$c119 = /^[a-zA-Z0-9_]/

peg$c12 = peg$literalExpectation(",", false)

peg$c120 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false)

peg$c121 = *anonymous function 11186*

peg$c122 = "@"

peg$c123 = peg$literalExpectation("@", false)

peg$c124 = *anonymous function 11338*

peg$c125 = "+"

peg$c126 = peg$literalExpectation("+", false)

peg$c127 = "~"

peg$c128 = peg$literalExpectation("~", false)

peg$c129 = "\"

peg$c13 = *anonymous function 4901*

peg$c130 = peg$literalExpectation("\", false)

peg$c131 = *anonymous function 11667*

peg$c132 = *anonymous function 11724*

peg$c133 = peg$anyExpectation()

peg$c134 = "b"

peg$c135 = peg$literalExpectation("b", false)

peg$c136 = *anonymous function 11889*

peg$c137 = "f"

peg$c138 = peg$literalExpectation("f", false)

peg$c139 = *anonymous function 12015*

peg$c14 = *anonymous function 4959*

peg$c140 = "n"

peg$c141 = peg$literalExpectation("n", false)

peg$c142 = *anonymous function 12141*

peg$c143 = "r"

peg$c144 = peg$literalExpectation("r", false)

peg$c145 = *anonymous function 12267*

peg$c146 = "t"

peg$c147 = peg$literalExpectation("t", false)

peg$c148 = *anonymous function 12393*

peg$c149 = *anonymous function 12448*

peg$c15 = *anonymous function 5103*

peg$c150 = "u"

peg$c151 = peg$literalExpectation("u", false)

peg$c152 = *anonymous function 12576*

peg$c153 = /^[0-9a-f]/i

peg$c154 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true)

peg$c155 = *anonymous function 12828*

peg$c156 = *anonymous function 12891*

peg$c157 = *anonymous function 12976*

peg$c158 = *anonymous function 13047*

peg$c159 = *anonymous function 13180*

peg$c16 = *anonymous function 5163*

peg$c160 = *anonymous function 13314*

peg$c161 = *anonymous function 13448*

peg$c162 = *anonymous function 13542*

peg$c163 = *anonymous function 13635*

peg$c164 = *anonymous function 13890*

peg$c165 = "?"

peg$c166 = peg$literalExpectation("?", false)

peg$c167 = ":"

peg$c168 = peg$literalExpectation(":", false)

peg$c169 = *anonymous function 14187*

peg$c17 = *anonymous function 5302*

peg$c170 = "??"

peg$c171 = peg$literalExpectation("??", false)

peg$c172 = *anonymous function 14447*

peg$c173 = "="

peg$c174 = peg$literalExpectation("=", false)

peg$c175 = "!="

peg$c176 = peg$literalExpectation("!=", false)

peg$c177 = "<>"

peg$c178 = peg$literalExpectation("<>", false)

peg$c179 = "<="

peg$c18 = *anonymous function 5467*

peg$c180 = peg$literalExpectation("<=", false)

peg$c181 = ">="

peg$c182 = peg$literalExpectation(">=", false)

peg$c183 = "<"

peg$c184 = peg$literalExpectation("<", false)

peg$c185 = ">"

peg$c186 = peg$literalExpectation(">", false)

peg$c187 = *anonymous function 15046*

peg$c188 = *anonymous function 15184*

peg$c189 = "|"

peg$c19 = *anonymous function 5531*

peg$c190 = peg$literalExpectation("|", false)

peg$c191 = "^"

peg$c192 = peg$literalExpectation("^", false)

peg$c193 = "&"

peg$c194 = peg$literalExpectation("&", false)

peg$c195 = "<<"

peg$c196 = peg$literalExpectation("<<", false)

peg$c197 = ">>>"

peg$c198 = peg$literalExpectation(">>>", false)

peg$c199 = ">>"

peg$c2 = *anonymous function 3999*

peg$c20 = *anonymous function 5671*

peg$c200 = peg$literalExpectation(">>", false)

peg$c201 = "||"

peg$c202 = peg$literalExpectation("||", false)

peg$c203 = "/"

peg$c204 = peg$literalExpectation("/", false)

peg$c205 = "%"

peg$c206 = peg$literalExpectation("%", false)

peg$c207 = *anonymous function 15996*

peg$c208 = *anonymous function 16071*

peg$c209 = *anonymous function 16200*

peg$c21 = *anonymous function 5792*

peg$c210 = *anonymous function 16459*

peg$c211 = *anonymous function 16597*

peg$c212 = *anonymous function 16712*

peg$c213 = *anonymous function 16836*

peg$c214 = *anonymous function 16924*

peg$c22 = *anonymous function 5935*

peg$c23 = "."

peg$c24 = peg$literalExpectation(".", false)

peg$c25 = "("

peg$c26 = peg$literalExpectation("(", false)

peg$c27 = ")"

peg$c28 = peg$literalExpectation(")", false)

peg$c29 = *anonymous function 6286*

peg$c3 = *anonymous function 4063*

peg$c30 = *anonymous function 6457*

peg$c31 = "{"

peg$c32 = peg$literalExpectation("{", false)

peg$c33 = "}"

peg$c34 = peg$literalExpectation("}", false)

peg$c35 = *anonymous function 6747*

peg$c36 = "["

peg$c37 = peg$literalExpectation("[", false)

peg$c38 = "]"

peg$c39 = peg$literalExpectation("]", false)

peg$c4 = *anonymous function 4133*

peg$c40 = *anonymous function 7045*

peg$c41 = "undefined"

peg$c42 = peg$literalExpectation("undefined", false)

peg$c43 = *anonymous function 7256*

peg$c44 = *anonymous function 7336*

peg$c45 = *anonymous function 7411*

peg$c46 = *anonymous function 7526*

peg$c47 = "-"

peg$c48 = peg$literalExpectation("-", false)

peg$c49 = "0x"

peg$c5 = *anonymous function 4210*

peg$c50 = peg$literalExpectation("0x", false)

peg$c51 = /^[0-9]/

peg$c52 = peg$classExpectation([["0", "9"]], false, false)

peg$c53 = *anonymous function 7868*

peg$c54 = """

peg$c55 = peg$literalExpectation(""", false)

peg$c56 = *anonymous function 8138*

peg$c57 = "'"

peg$c58 = peg$literalExpectation("'", false)

peg$c59 = *anonymous function 8335*

peg$c6 = "*"

peg$c60 = *anonymous function 8471*

peg$c61 = /^[ \t\n\r]/

peg$c62 = peg$classExpectation(
    [
        " ",
        "	",
        "
",
        ""
    ],
    false,
    false
)

peg$c63 = "--"

peg$c64 = peg$literalExpectation("--", false)

peg$c65 = /^[\n\r]/

peg$c66 = peg$classExpectation(
    [
        "
",
        ""
    ],
    false,
    false
)

peg$c67 = "select"

peg$c68 = peg$literalExpectation("SELECT", true)

peg$c69 = "top"

peg$c7 = peg$literalExpectation("*", false)

peg$c70 = peg$literalExpectation("TOP", true)

peg$c71 = "from"

peg$c72 = peg$literalExpectation("FROM", true)

peg$c73 = "where"

peg$c74 = peg$literalExpectation("WHERE", true)

peg$c75 = "order"

peg$c76 = peg$literalExpectation("ORDER", true)

peg$c77 = "by"

peg$c78 = peg$literalExpectation("BY", true)

peg$c79 = "as"

peg$c8 = *anonymous function 4473*

peg$c80 = peg$literalExpectation("AS", true)

peg$c81 = "join"

peg$c82 = peg$literalExpectation("JOIN", true)

peg$c83 = "in"

peg$c84 = peg$literalExpectation("IN", true)

peg$c85 = "value"

peg$c86 = peg$literalExpectation("VALUE", true)

peg$c87 = "asc"

peg$c88 = peg$literalExpectation("ASC", true)

peg$c89 = *anonymous function 9681*

peg$c9 = *anonymous function 4588*

peg$c90 = "desc"

peg$c91 = peg$literalExpectation("DESC", true)

peg$c92 = *anonymous function 9810*

peg$c93 = "and"

peg$c94 = peg$literalExpectation("AND", true)

peg$c95 = *anonymous function 9938*

peg$c96 = "or"

peg$c97 = peg$literalExpectation("OR", true)

peg$c98 = *anonymous function 10063*

peg$c99 = "not"

peg$classExpectation = (...) => {"type": "class", "parts": parts, "inverted": inverted, "ignoreCase": ignoreCase}

peg$computeLocation = (...) => {
    "start": {"offset": startPos, "line": startPosDetails["line"], "column": startPosDetails["column"]},
    "end": {"offset": endPos, "line": endPosDetails["line"], "column": endPosDetails["column"]}
}

peg$computePosDetails = (...) => details

peg$currPos = (
  | 0
  | s0
  | s3
  | s7
  | s9
  | s11
  | s0
  | s0
  | s3
  | s0
  | s3
  | s0
  | s0
  | s3
  | s2
  | s3
  | s0
  | s2
  | s0
  | s0
  | s5
  | s0
  | s0
  | s4
  | s0
  | s0
  | s5
  | s0
  | s5
  | s0
  | s4
  | s3
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s2
  | s0
  | s1
  | s0
  | s0
  | s0
  | s1
  | s0
  | s1
  | s0
  | s1
  | s0
  | s3
  | s0
  | s3
  | s2
  | s0
  | s0
  | s0
  | s0
  | s3
  | s0
  | s0
  | s0
  | s3
  | s0
  | s3
  | s0
  | s3
  | s0
  | s3
  | s0
  | s0
  | s0
  | s3
  | s0
  | s3
  | s0
  | s3
  | s0
  | s3
  | s0
  | s3
  | s0
  | s3
  | s0
  | s0
  | s0
  | s3
  | s0
  | s3
  | s0
  | s0
)

peg$endExpectation = (...) => {"type": "end"}

peg$fail = (...) => FreeVar(undefined)

peg$literalExpectation = (...) => {"type": "literal", "text": text, "ignoreCase": ignoreCase}

peg$maxFailExpected = []

peg$maxFailPos = (0 | peg$currPos)

peg$otherExpectation = (...) => {"type": "other", "description": description}

peg$parse = (...) => peg$result

peg$parse_ = (...) => s0

peg$parseand = (...) => s0

peg$parsearray = (...) => s0

peg$parsearray_constant = (...) => s0

peg$parsearray_subquery_expression = (...) => s0

peg$parseas = (...) => s0

peg$parseasc = (...) => s0

peg$parsebetween = (...) => s0

peg$parseboolean_constant = (...) => s0

peg$parseby = (...) => s0

peg$parsecharactor_escape_sequence = (...) => s0

peg$parsecollection_expression = (...) => s0

peg$parsecollection_member_expression = (...) => s0

peg$parsecollection_primary_expression = (...) => s0

peg$parsecollection_subquery_expression = (...) => s0

peg$parsecomment = (...) => s0

peg$parseconstant = (...) => s0

peg$parsedesc = (...) => s0

peg$parsedouble_string_character = (...) => s0

peg$parseescape_character = (...) => s0

peg$parseescape_sequence = (...) => s0

peg$parseexists = (...) => s0

peg$parseexists_subquery_expression = (...) => s0

peg$parsefalse = (...) => s0

peg$parsefilter_condition = (...) => s0

peg$parsefrom = (...) => s0

peg$parsefrom_source = (...) => s0

peg$parsefrom_specification = (...) => s0

peg$parsehex_digit = (...) => s0

peg$parseidentifier = (...) => s0

peg$parseidentifier_name = (...) => s0

peg$parseidentifier_start = (...) => s0

peg$parsein = (...) => s0

peg$parsejoin = (...) => s0

peg$parsenon_escape_character = (...) => s0

peg$parsenot = (...) => s0

peg$parsenull = (...) => s0

peg$parsenull_constant = (...) => s0

peg$parsenumber_constant = (...) => s0

peg$parseobject_constant = (...) => s0

peg$parseobject_constant_property = (...) => s0

peg$parseobject_property = (...) => s0

peg$parseobject_property_list = (...) => s0

peg$parseor = (...) => s0

peg$parseorder = (...) => s0

peg$parseparameter_name = (...) => s0

peg$parsereserved = (...) => s0

peg$parsescalar_array_expression = (...) => s0

peg$parsescalar_between_expression = (...) => s0

peg$parsescalar_binary_additive_expression = (...) => s0

peg$parsescalar_binary_and_expression = (...) => s0

peg$parsescalar_binary_bitwise_and_expression = (...) => s0

peg$parsescalar_binary_bitwise_or_expression = (...) => s0

peg$parsescalar_binary_bitwise_xor_expression = (...) => s0

peg$parsescalar_binary_equality_expression = (...) => s0

peg$parsescalar_binary_multiplicative_expression = (...) => s0

peg$parsescalar_binary_or_expression = (...) => s0

peg$parsescalar_binary_relational_expression = (...) => s0

peg$parsescalar_binary_shift_expression = (...) => s0

peg$parsescalar_conditional_expression = (...) => s0

peg$parsescalar_expression_list = (...) => s0

peg$parsescalar_function_expression = (...) => s0

peg$parsescalar_in_expression = (...) => s0

peg$parsescalar_member_expression = (...) => s0

peg$parsescalar_object_element_property = (...) => s0

peg$parsescalar_object_expression = (...) => s0

peg$parsescalar_primary_expression = (...) => s0

peg$parsescalar_subquery_expression = (...) => s0

peg$parsescalar_unary_expression = (...) => s0

peg$parseselect = (...) => s0

peg$parseselect_query = (...) => s0

peg$parseselect_specification = (...) => s0

peg$parsesingle_escape_character = (...) => s0

peg$parsesingle_string_character = (...) => s0

peg$parsesort_expression = (...) => s0

peg$parsesort_specification = (...) => s0

peg$parsesource_character = (...) => s0

peg$parsesql = (...) => s0

peg$parsestring_constant = (...) => s0

peg$parsesubquery = (...) => s0

peg$parsesubquery_expression = (...) => s0

peg$parsetop = (...) => s0

peg$parsetop_specification = (...) => s0

peg$parsetrue = (...) => s0

peg$parseudf = (...) => s0

peg$parseunary_operator = (...) => s0

peg$parseundefined_constant = (...) => s0

peg$parseunicode_escape_sequence = (...) => s0

peg$parseunsigned_integer = (...) => s0

peg$parsevalue = (...) => s0

peg$parsewhere = (...) => s0

peg$parsewhitespace = (...) => s0

peg$posDetailsCache = [{"line": 1, "column": 1}]

peg$result = (???*0* | peg$startRuleFunction())
- *0* peg$result
  ⚠️  pattern without value

peg$savedPos = (
  | 0
  | s0
  | s3
  | s7
  | s9
  | s11
  | s0
  | s0
  | s3
  | s0
  | s3
  | s0
  | s0
  | s2
  | s0
  | s3
  | s0
  | s2
  | s0
  | s0
  | s5
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s5
  | s0
  | s5
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s2
  | s0
  | s0
  | s0
  | s0
  | s0
  | s3
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s0
  | s3
  | s0
  | s0
  | s0
  | s0
  | s3
  | s0
  | s0
)

peg$silentFails = 0

peg$startRuleFunction = (peg$parsesql | peg$startRuleFunctions[options["startRule"]])

peg$startRuleFunctions = {"sql": peg$parsesql}

peg$subclass = (...) => FreeVar(undefined)

pos = arguments[0]

properties = arguments[0]

property#51 = arguments[0]

property#52 = arguments[0]

property#57 = arguments[1]

property#58 = arguments[1]

right = ???*0*
- *0* right
  ⚠️  pattern without value

s#11 = arguments[0]

s#14 = arguments[0]

s0#100 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#101 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#102 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#103 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#104 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#105 = (???*0* | [])
- *0* s0
  ⚠️  pattern without value

s0#106 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#107 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#108 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#109 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#110 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#111 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#112 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#113 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#114 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#115 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#116 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#117 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#118 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#119 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#120 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#121 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#122 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#123 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#124 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#125 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#126 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#127 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#128 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#129 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#130 = (
  | ???*0*
  | peg$parseselect()
  | peg$parsetop()
  | peg$parsefrom()
  | peg$parsewhere()
  | peg$parseorder()
  | peg$parseby()
  | peg$parseas()
  | peg$parsejoin()
  | peg$parsein()
  | peg$parsevalue()
  | peg$parseasc()
  | peg$parsedesc()
  | peg$parseand()
  | peg$parseor()
  | peg$parsenot()
  | peg$parsebetween()
  | peg$parseexists()
  | peg$parsearray()
  | peg$parsenull()
  | peg$parsetrue()
  | peg$parsefalse()
  | peg$parseudf()
)
- *0* s0
  ⚠️  pattern without value

s0#131 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#132 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#133 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#134 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#135 = (???*0* | peg$c125 | peg$FAILED | peg$c47 | peg$c127 | peg$parsenot())
- *0* s0
  ⚠️  pattern without value

s0#136 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#137 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#138 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#139 = (???*0* | peg$parsecharactor_escape_sequence() | peg$parseunicode_escape_sequence())
- *0* s0
  ⚠️  pattern without value

s0#140 = (???*0* | peg$parsesingle_escape_character() | peg$parsenon_escape_character())
- *0* s0
  ⚠️  pattern without value

s0#141 = (???*0* | peg$c57 | peg$FAILED | peg$c54 | peg$c129 | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#142 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#143 = (???*0* | peg$parsesingle_escape_character() | peg$c150 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#144 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#145 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#146 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#147 = (
  | ???*0*
  | peg$parseidentifier()
  | peg$parseparameter_name()
  | peg$parseconstant()
  | peg$parsescalar_array_expression()
  | peg$parsescalar_object_expression()
  | peg$parsesubquery_expression()
  | peg$currPos
  | s1
  | peg$FAILED
)
- *0* s0
  ⚠️  pattern without value

s0#148 = (
  | ???*0*
  | peg$parsearray_subquery_expression()
  | peg$parseexists_subquery_expression()
  | peg$parsescalar_subquery_expression()
)
- *0* s0
  ⚠️  pattern without value

s0#149 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#150 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#151 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#152 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#153 = (
  | ???*0*
  | peg$parsescalar_function_expression()
  | peg$parsescalar_member_expression()
  | peg$currPos
  | s1
  | peg$FAILED
)
- *0* s0
  ⚠️  pattern without value

s0#154 = (???*0* | peg$currPos | s1 | peg$FAILED | peg$parsescalar_binary_or_expression())
- *0* s0
  ⚠️  pattern without value

s0#155 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#156 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#157 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#158 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#159 = (???*0* | peg$currPos | s1 | peg$FAILED | peg$parsescalar_between_expression())
- *0* s0
  ⚠️  pattern without value

s0#160 = (???*0* | peg$currPos | s1 | peg$FAILED | peg$parsescalar_binary_bitwise_or_expression())
- *0* s0
  ⚠️  pattern without value

s0#161 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#162 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#163 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#164 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#165 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#166 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#167 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#168 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#169 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#170 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#171 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#172 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#173 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#174 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#175 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#84 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#85 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#86 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#87 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#88 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#89 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#90 = (
  | ???*0*
  | peg$parsecollection_member_expression()
  | peg$parsecollection_primary_expression()
  | peg$parsecollection_subquery_expression()
)
- *0* s0
  ⚠️  pattern without value

s0#91 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#92 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#93 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#94 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#95 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#96 = (???*0* | peg$currPos | s1 | peg$FAILED)
- *0* s0
  ⚠️  pattern without value

s0#97 = (
  | ???*0*
  | peg$parseundefined_constant()
  | peg$parsenull_constant()
  | peg$parseboolean_constant()
  | peg$parsenumber_constant()
  | peg$parsestring_constant()
  | peg$parsearray_constant()
  | peg$parseobject_constant()
)
- *0* s0
  ⚠️  pattern without value

s0#98 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s0#99 = (???*0* | peg$currPos | s1)
- *0* s0
  ⚠️  pattern without value

s1#100 = (???*0* | peg$parsefalse() | peg$c45() | peg$parsetrue() | peg$c46())
- *0* s1
  ⚠️  pattern without value

s1#101 = (???*0* | peg$c47 | peg$FAILED | null | peg$c53(s2))
- *0* s1
  ⚠️  pattern without value

s1#102 = (???*0* | peg$c54 | peg$FAILED | peg$c56(s2) | peg$c57)
- *0* s1
  ⚠️  pattern without value

s1#103 = (???*0* | peg$c36 | peg$FAILED | peg$c59(s3, s4))
- *0* s1
  ⚠️  pattern without value

s1#104 = (???*0* | peg$c31 | peg$FAILED | peg$c60(s3, s4))
- *0* s1
  ⚠️  pattern without value

s1#105 = (???*0* | peg$parsewhitespace() | peg$parsecomment())
- *0* s1
  ⚠️  pattern without value

s1#107 = (???*0* | peg$c63 | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#108 = (???*0* | input["substr"](peg$currPos, 6) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#109 = (???*0* | input["substr"](peg$currPos, 3) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#110 = (???*0* | input["substr"](peg$currPos, 4) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#111 = (???*0* | input["substr"](peg$currPos, 5) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#112 = (???*0* | input["substr"](peg$currPos, 5) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#113 = (???*0* | input["substr"](peg$currPos, 2) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#114 = (???*0* | input["substr"](peg$currPos, 2) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#115 = (???*0* | input["substr"](peg$currPos, 4) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#116 = (???*0* | input["substr"](peg$currPos, 2) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#117 = (???*0* | input["substr"](peg$currPos, 5) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#118 = (???*0* | input["substr"](peg$currPos, 3) | peg$FAILED | peg$c89())
- *0* s1
  ⚠️  pattern without value

s1#119 = (???*0* | input["substr"](peg$currPos, 4) | peg$FAILED | peg$c92())
- *0* s1
  ⚠️  pattern without value

s1#120 = (???*0* | input["substr"](peg$currPos, 3) | peg$FAILED | peg$c95())
- *0* s1
  ⚠️  pattern without value

s1#121 = (???*0* | input["substr"](peg$currPos, 2) | peg$FAILED | peg$c98())
- *0* s1
  ⚠️  pattern without value

s1#122 = (???*0* | input["substr"](peg$currPos, 3) | peg$FAILED | peg$c101())
- *0* s1
  ⚠️  pattern without value

s1#123 = (???*0* | input["substr"](peg$currPos, 7) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#124 = (???*0* | input["substr"](peg$currPos, 6) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#125 = (???*0* | input["substr"](peg$currPos, 5) | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#126 = (???*0* | peg$c108 | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#127 = (???*0* | peg$c110 | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#128 = (???*0* | peg$c112 | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#129 = (???*0* | peg$c114 | peg$FAILED | [s1, s2])
- *0* s1
  ⚠️  pattern without value

s1#131 = (???*0* | peg$currPos | ???*1* | peg$FAILED | peg$c116(s2))
- *0* s1
  ⚠️  pattern without value
- *1* unsupported expression

s1#133 = (???*0* | peg$parseidentifier_start() | peg$c121(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#134 = (???*0* | peg$c122 | peg$FAILED | peg$c124())
- *0* s1
  ⚠️  pattern without value

s1#136 = (???*0* | peg$currPos | ???*1* | peg$FAILED | peg$c131() | peg$c129 | peg$c132(s2))
- *0* s1
  ⚠️  pattern without value
- *1* unsupported expression

s1#137 = (???*0* | peg$currPos | ???*1* | peg$FAILED | peg$c131() | peg$c129 | peg$c132(s2))
- *0* s1
  ⚠️  pattern without value
- *1* unsupported expression

s1#141 = (
  | ???*0*
  | peg$c134
  | peg$FAILED
  | peg$c136()
  | peg$c137
  | peg$c139()
  | peg$c140
  | peg$c142()
  | peg$c143
  | peg$c145()
  | peg$c146
  | peg$c148()
)
- *0* s1
  ⚠️  pattern without value

s1#142 = (???*0* | peg$currPos | ???*1* | peg$FAILED | peg$c149())
- *0* s1
  ⚠️  pattern without value
- *1* unsupported expression

s1#144 = (???*0* | peg$c150 | peg$FAILED | peg$c152(s2))
- *0* s1
  ⚠️  pattern without value

s1#146 = (???*0* | peg$parsescalar_conditional_expression() | peg$c156(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#147 = (???*0* | peg$c25 | peg$FAILED | peg$c157(s3))
- *0* s1
  ⚠️  pattern without value

s1#149 = (???*0* | peg$parsearray() | peg$c158(s3))
- *0* s1
  ⚠️  pattern without value

s1#150 = (???*0* | peg$parseexists() | peg$c159(s3))
- *0* s1
  ⚠️  pattern without value

s1#151 = (???*0* | peg$parsesubquery() | peg$c160(s1))
- *0* s1
  ⚠️  pattern without value

s1#152 = (???*0* | peg$parsescalar_primary_expression() | peg$c163(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#153 = (???*0* | peg$parseunary_operator() | peg$c164(s1, s3))
- *0* s1
  ⚠️  pattern without value

s1#154 = (???*0* | peg$parsescalar_binary_or_expression() | peg$c169(s1, s5, s9))
- *0* s1
  ⚠️  pattern without value

s1#155 = (???*0* | peg$parsescalar_binary_and_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#156 = (???*0* | peg$parsescalar_binary_equality_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#157 = (???*0* | peg$parsescalar_binary_relational_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#158 = (???*0* | peg$parsescalar_in_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#159 = (???*0* | peg$parsescalar_between_expression() | peg$c187(s1, s7))
- *0* s1
  ⚠️  pattern without value

s1#160 = (???*0* | peg$parsescalar_binary_bitwise_or_expression() | peg$c188(s1, s5, s9))
- *0* s1
  ⚠️  pattern without value

s1#161 = (???*0* | peg$parsescalar_binary_bitwise_xor_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#162 = (???*0* | peg$parsescalar_binary_bitwise_and_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#163 = (???*0* | peg$parsescalar_binary_shift_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#164 = (???*0* | peg$parsescalar_binary_additive_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#165 = (???*0* | peg$parsescalar_binary_multiplicative_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#166 = (???*0* | peg$parsescalar_unary_expression() | peg$c172(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#167 = (???*0* | peg$parseidentifier() | peg$parsestring_constant() | peg$c207(s1, s5))
- *0* s1
  ⚠️  pattern without value

s1#168 = (???*0* | peg$parseidentifier() | peg$parsestring_constant() | peg$c207(s1, s5))
- *0* s1
  ⚠️  pattern without value

s1#169 = (???*0* | peg$parseidentifier() | peg$c208(s1))
- *0* s1
  ⚠️  pattern without value

s1#170 = (???*0* | peg$parsecollection_primary_expression() | peg$c209(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#171 = (???*0* | peg$parsesubquery() | peg$c210(s1))
- *0* s1
  ⚠️  pattern without value

s1#172 = (???*0* | peg$parseunsigned_integer() | peg$parseparameter_name() | peg$c211(s1))
- *0* s1
  ⚠️  pattern without value

s1#173 = (???*0* | [] | peg$FAILED | peg$c212())
- *0* s1
  ⚠️  pattern without value

s1#174 = (???*0* | peg$parsescalar_conditional_expression() | null | peg$c213(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#175 = (???*0* | peg$c25 | peg$FAILED | peg$c214(s3))
- *0* s1
  ⚠️  pattern without value

s1#84 = (???*0* | peg$parse_() | peg$c0(s2))
- *0* s1
  ⚠️  pattern without value

s1#85 = (???*0* | peg$parseselect() | peg$c5(s3, s5, s7, s9, s11))
- *0* s1
  ⚠️  pattern without value

s1#86 = (
  | ???*0*
  | peg$c6
  | peg$FAILED
  | peg$c8()
  | peg$parseobject_property_list()
  | peg$c9(s1)
  | peg$parsevalue()
  | peg$c10(s3)
)
- *0* s1
  ⚠️  pattern without value

s1#87 = (???*0* | peg$parseobject_property() | peg$c14(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#88 = (???*0* | peg$parsefrom_source() | peg$c16(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#89 = (
  | ???*0*
  | peg$parseidentifier()
  | peg$c17(s1, s5)
  | peg$parsecollection_expression()
  | peg$c19(s1, s2)
)
- *0* s1
  ⚠️  pattern without value

s1#91 = (???*0* | peg$parsescalar_conditional_expression() | peg$c20(s1))
- *0* s1
  ⚠️  pattern without value

s1#92 = (???*0* | peg$parsesort_expression() | peg$c21(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#93 = (???*0* | peg$parsescalar_conditional_expression() | peg$c22(s1, s2))
- *0* s1
  ⚠️  pattern without value

s1#94 = (???*0* | peg$parseudf() | peg$c29(s5, s9) | peg$parseidentifier() | peg$c30(s1, s5))
- *0* s1
  ⚠️  pattern without value

s1#95 = (???*0* | peg$c31 | peg$FAILED | peg$c35(s3, s4))
- *0* s1
  ⚠️  pattern without value

s1#96 = (???*0* | peg$c36 | peg$FAILED | peg$c40(s3))
- *0* s1
  ⚠️  pattern without value

s1#98 = (???*0* | peg$c41 | peg$FAILED | peg$c43())
- *0* s1
  ⚠️  pattern without value

s1#99 = (???*0* | peg$parsenull() | peg$c44())
- *0* s1
  ⚠️  pattern without value

s10#85 = (
  | ???*0*
  | peg$parsefrom_specification()
  | peg$parsewhere()
  | peg$c3(s3, s5, s7, s12)
  | peg$parse_()
)
- *0* s10
  ⚠️  pattern without value

s10#94 = (???*0* | peg$parse_())
- *0* s10
  ⚠️  pattern without value

s11#85 = (???*0* | peg$parse_() | peg$currPos | s12 | peg$FAILED | null)
- *0* s11
  ⚠️  pattern without value

s11#94 = (???*0* | peg$c27 | peg$FAILED)
- *0* s11
  ⚠️  pattern without value

s12 = (???*0* | peg$parsefilter_condition() | peg$parseorder() | peg$c4(s3, s5, s7, s9, s16))
- *0* s12
  ⚠️  pattern without value

s13 = (???*0* | peg$parse_())
- *0* s13
  ⚠️  pattern without value

s14 = (???*0* | peg$parseby())
- *0* s14
  ⚠️  pattern without value

s15 = (???*0* | peg$parse_())
- *0* s15
  ⚠️  pattern without value

s16 = (???*0* | peg$parsesort_specification())
- *0* s16
  ⚠️  pattern without value

s2#101 = (???*0* | peg$c49 | peg$FAILED | null)
- *0* s2
  ⚠️  pattern without value

s2#102 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#103 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#104 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#107 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#108 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#109 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#110 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#111 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#112 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#113 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#114 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#115 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#116 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#117 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#118 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#119 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#120 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#121 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#122 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#123 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#124 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#125 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#126 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#127 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#128 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#129 = (???*0* | peg$currPos | ???*1* | peg$FAILED)
- *0* s2
  ⚠️  pattern without value
- *1* unsupported expression

s2#131 = (???*0* | peg$parsereserved() | peg$parseidentifier_name())
- *0* s2
  ⚠️  pattern without value

s2#133 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#134 = (???*0* | peg$parseidentifier_name())
- *0* s2
  ⚠️  pattern without value

s2#136 = (
  | ???*0*
  | peg$c54
  | peg$FAILED
  | peg$c129
  | peg$parsesource_character()
  | peg$parseescape_sequence()
)
- *0* s2
  ⚠️  pattern without value

s2#137 = (
  | ???*0*
  | peg$c57
  | peg$FAILED
  | peg$c129
  | peg$parsesource_character()
  | peg$parseescape_sequence()
)
- *0* s2
  ⚠️  pattern without value

s2#142 = (???*0* | peg$parseescape_character() | peg$parsesource_character())
- *0* s2
  ⚠️  pattern without value

s2#144 = (???*0* | peg$currPos | input["substring"](s2, peg$currPos) | s3)
- *0* s2
  ⚠️  pattern without value

s2#146 = (???*0* | peg$currPos | s3 | peg$FAILED | null)
- *0* s2
  ⚠️  pattern without value

s2#147 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#149 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#150 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#152 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#153 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#154 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#155 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#156 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#157 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#158 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#159 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#160 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#161 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#162 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#163 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#164 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#165 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#166 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#167 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#168 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#170 = (???*0* | [] | peg$FAILED)
- *0* s2
  ⚠️  pattern without value

s2#173 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED)
- *0* s2
  ⚠️  pattern without value

s2#174 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#175 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#84 = (???*0* | peg$parseselect_query())
- *0* s2
  ⚠️  pattern without value

s2#85 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#86 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#87 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#88 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#89 = (???*0* | peg$parse_() | peg$currPos | s3 | peg$FAILED | null)
- *0* s2
  ⚠️  pattern without value

s2#92 = (???*0* | [])
- *0* s2
  ⚠️  pattern without value

s2#93 = (???*0* | peg$currPos | s3 | peg$FAILED | null)
- *0* s2
  ⚠️  pattern without value

s2#94 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#95 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s2#96 = (???*0* | peg$parse_())
- *0* s2
  ⚠️  pattern without value

s3#101 = (???*0* | [] | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#102 = (
  | ???*0*
  | peg$parsedouble_string_character()
  | peg$c54
  | peg$FAILED
  | peg$parsesingle_string_character()
  | peg$c57
)
- *0* s3
  ⚠️  pattern without value

s3#103 = (???*0* | peg$parseconstant())
- *0* s3
  ⚠️  pattern without value

s3#104 = (???*0* | peg$parseobject_constant_property())
- *0* s3
  ⚠️  pattern without value

s3#107 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#108 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#109 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#110 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#111 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#112 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#113 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#114 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#115 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#116 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#117 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#118 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#119 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#120 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#121 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#122 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#123 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#124 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#125 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#126 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#127 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#128 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#129 = (???*0* | peg$parseidentifier_start())
- *0* s3
  ⚠️  pattern without value

s3#133 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#144 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#146 = (???*0* | peg$currPos | s4 | peg$FAILED | null | peg$c155(s1, s5))
- *0* s3
  ⚠️  pattern without value

s3#147 = (???*0* | peg$parsescalar_conditional_expression())
- *0* s3
  ⚠️  pattern without value

s3#149 = (???*0* | peg$parsesubquery())
- *0* s3
  ⚠️  pattern without value

s3#150 = (???*0* | peg$parsesubquery())
- *0* s3
  ⚠️  pattern without value

s3#152 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#153 = (???*0* | peg$parsescalar_unary_expression())
- *0* s3
  ⚠️  pattern without value

s3#154 = (???*0* | peg$c165 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#155 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#156 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#157 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#158 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#159 = (???*0* | peg$parsein())
- *0* s3
  ⚠️  pattern without value

s3#160 = (???*0* | peg$parsebetween())
- *0* s3
  ⚠️  pattern without value

s3#161 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#162 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#163 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#164 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#165 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#166 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#167 = (???*0* | peg$c167 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#168 = (???*0* | peg$c167 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#170 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#174 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#175 = (???*0* | peg$parseselect_query())
- *0* s3
  ⚠️  pattern without value

s3#84 = (???*0* | peg$parse_())
- *0* s3
  ⚠️  pattern without value

s3#85 = (???*0* | peg$currPos | s4 | peg$FAILED | null)
- *0* s3
  ⚠️  pattern without value

s3#86 = (???*0* | peg$parsescalar_conditional_expression())
- *0* s3
  ⚠️  pattern without value

s3#87 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#88 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#89 = (???*0* | peg$parsein() | peg$currPos | s4 | peg$FAILED | null | peg$c18(s1, s5))
- *0* s3
  ⚠️  pattern without value

s3#92 = (???*0* | peg$currPos | s4 | peg$FAILED)
- *0* s3
  ⚠️  pattern without value

s3#93 = (???*0* | peg$parse_() | peg$c18(s1, s4))
- *0* s3
  ⚠️  pattern without value

s3#94 = (???*0* | peg$c23 | peg$FAILED | peg$c25)
- *0* s3
  ⚠️  pattern without value

s3#95 = (???*0* | peg$parsescalar_object_element_property() | null)
- *0* s3
  ⚠️  pattern without value

s3#96 = (???*0* | peg$parsescalar_expression_list())
- *0* s3
  ⚠️  pattern without value

s4#101 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED | peg$currPos | s5 | null)
- *0* s4
  ⚠️  pattern without value

s4#103 = (???*0* | [])
- *0* s4
  ⚠️  pattern without value

s4#104 = (???*0* | [])
- *0* s4
  ⚠️  pattern without value

s4#107 = (???*0* | peg$currPos | ???*1* | peg$FAILED | [s4, s5])
- *0* s4
  ⚠️  pattern without value
- *1* unsupported expression

s4#144 = (???*0* | peg$parsehex_digit() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#146 = (???*0* | peg$parse_() | [s4, s5])
- *0* s4
  ⚠️  pattern without value

s4#147 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#152 = (???*0* | peg$parse_() | peg$c161(s1, s7) | peg$c162(s1, s7))
- *0* s4
  ⚠️  pattern without value

s4#154 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#155 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#156 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#157 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#158 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#159 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#160 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#161 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#162 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#163 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#164 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#165 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#166 = (???*0* | peg$parse_() | [s4, s5, s6, s7])
- *0* s4
  ⚠️  pattern without value

s4#167 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#168 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#170 = (???*0* | peg$parse_() | peg$c161(s1, s7) | peg$c162(s1, s7))
- *0* s4
  ⚠️  pattern without value

s4#174 = (???*0* | peg$parse_() | peg$c13(s1, s7))
- *0* s4
  ⚠️  pattern without value

s4#175 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#85 = (???*0* | peg$parsetop() | peg$c1(s6) | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#87 = (???*0* | peg$parse_() | peg$c13(s1, s7))
- *0* s4
  ⚠️  pattern without value

s4#88 = (???*0* | peg$parse_() | peg$c15(s1, s7))
- *0* s4
  ⚠️  pattern without value

s4#89 = (???*0* | peg$parse_() | [s4, s5])
- *0* s4
  ⚠️  pattern without value

s4#92 = (???*0* | peg$parse_() | peg$c13(s1, s7))
- *0* s4
  ⚠️  pattern without value

s4#93 = (???*0* | peg$parseasc() | peg$parsedesc())
- *0* s4
  ⚠️  pattern without value

s4#94 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s4#95 = (???*0* | [])
- *0* s4
  ⚠️  pattern without value

s4#96 = (???*0* | peg$parse_())
- *0* s4
  ⚠️  pattern without value

s5#101 = (???*0* | peg$c23 | peg$FAILED | [s5, s6])
- *0* s5
  ⚠️  pattern without value

s5#103 = (???*0* | peg$currPos | s6 | peg$FAILED | peg$parse_())
- *0* s5
  ⚠️  pattern without value

s5#104 = (???*0* | peg$currPos | s6 | peg$FAILED | peg$parse_())
- *0* s5
  ⚠️  pattern without value

s5#107 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED | peg$parsesource_character())
- *0* s5
  ⚠️  pattern without value

s5#144 = (???*0* | peg$parsehex_digit())
- *0* s5
  ⚠️  pattern without value

s5#146 = (???*0* | peg$parseas() | peg$parseidentifier())
- *0* s5
  ⚠️  pattern without value

s5#147 = (???*0* | peg$c27 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#152 = (???*0* | peg$c23 | peg$FAILED | peg$c36)
- *0* s5
  ⚠️  pattern without value

s5#154 = (???*0* | peg$parsescalar_conditional_expression())
- *0* s5
  ⚠️  pattern without value

s5#155 = (???*0* | peg$parseor() | peg$c170 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#156 = (???*0* | peg$parseand())
- *0* s5
  ⚠️  pattern without value

s5#157 = (???*0* | peg$c173 | peg$FAILED | peg$c175 | peg$c177)
- *0* s5
  ⚠️  pattern without value

s5#158 = (???*0* | peg$c179 | peg$FAILED | peg$c181 | peg$c183 | peg$c185)
- *0* s5
  ⚠️  pattern without value

s5#159 = (???*0* | peg$c25 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#160 = (???*0* | peg$parsescalar_binary_bitwise_or_expression())
- *0* s5
  ⚠️  pattern without value

s5#161 = (???*0* | peg$c189 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#162 = (???*0* | peg$c191 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#163 = (???*0* | peg$c193 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#164 = (???*0* | peg$c195 | peg$FAILED | peg$c197 | peg$c199)
- *0* s5
  ⚠️  pattern without value

s5#165 = (???*0* | peg$c125 | peg$FAILED | peg$c47 | peg$c201)
- *0* s5
  ⚠️  pattern without value

s5#166 = (???*0* | peg$c6 | peg$FAILED | peg$c203 | peg$c205)
- *0* s5
  ⚠️  pattern without value

s5#167 = (???*0* | peg$parsescalar_conditional_expression())
- *0* s5
  ⚠️  pattern without value

s5#168 = (???*0* | peg$parseconstant())
- *0* s5
  ⚠️  pattern without value

s5#170 = (???*0* | peg$c23 | peg$FAILED | peg$c36)
- *0* s5
  ⚠️  pattern without value

s5#174 = (???*0* | peg$c11 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#175 = (???*0* | peg$c27 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#85 = (???*0* | peg$parse_() | peg$parseselect_specification())
- *0* s5
  ⚠️  pattern without value

s5#87 = (???*0* | peg$c11 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#88 = (???*0* | peg$parsejoin())
- *0* s5
  ⚠️  pattern without value

s5#89 = (???*0* | peg$parsecollection_expression() | peg$parseas() | peg$parseidentifier())
- *0* s5
  ⚠️  pattern without value

s5#92 = (???*0* | peg$c11 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s5#94 = (???*0* | peg$parseidentifier() | peg$parsescalar_expression_list())
- *0* s5
  ⚠️  pattern without value

s5#95 = (???*0* | peg$currPos | s6 | peg$FAILED | peg$parse_())
- *0* s5
  ⚠️  pattern without value

s5#96 = (???*0* | peg$c38 | peg$FAILED)
- *0* s5
  ⚠️  pattern without value

s6#101 = (???*0* | [] | peg$FAILED)
- *0* s6
  ⚠️  pattern without value

s6#103 = (???*0* | peg$parse_() | peg$c13(s3, s9) | peg$c38 | peg$FAILED)
- *0* s6
  ⚠️  pattern without value

s6#104 = (???*0* | peg$parse_() | peg$c13(s3, s9) | peg$c33 | peg$FAILED)
- *0* s6
  ⚠️  pattern without value

s6#144 = (???*0* | peg$parsehex_digit())
- *0* s6
  ⚠️  pattern without value

s6#152 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#154 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#155 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#156 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#157 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#158 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#159 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#160 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#161 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#162 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#163 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#164 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#165 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#166 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#170 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#174 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#85 = (???*0* | peg$parsetop_specification() | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#87 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#88 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#92 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#94 = (???*0* | peg$parse_())
- *0* s6
  ⚠️  pattern without value

s6#95 = (???*0* | peg$parse_() | peg$c13(s3, s9) | peg$c33 | peg$FAILED)
- *0* s6
  ⚠️  pattern without value

s7#101 = (???*0* | input["charAt"](peg$currPos) | peg$FAILED)
- *0* s7
  ⚠️  pattern without value

s7#103 = (???*0* | peg$c11 | peg$FAILED)
- *0* s7
  ⚠️  pattern without value

s7#104 = (???*0* | peg$c11 | peg$FAILED)
- *0* s7
  ⚠️  pattern without value

s7#144 = (???*0* | peg$parsehex_digit())
- *0* s7
  ⚠️  pattern without value

s7#152 = (
  | ???*0*
  | peg$parseidentifier()
  | peg$parsestring_constant()
  | peg$parseunsigned_integer()
  | peg$parseparameter_name()
)
- *0* s7
  ⚠️  pattern without value

s7#154 = (???*0* | peg$c167 | peg$FAILED)
- *0* s7
  ⚠️  pattern without value

s7#155 = (???*0* | peg$parsescalar_binary_and_expression())
- *0* s7
  ⚠️  pattern without value

s7#156 = (???*0* | peg$parsescalar_binary_equality_expression())
- *0* s7
  ⚠️  pattern without value

s7#157 = (???*0* | peg$parsescalar_binary_relational_expression())
- *0* s7
  ⚠️  pattern without value

s7#158 = (???*0* | peg$parsescalar_in_expression())
- *0* s7
  ⚠️  pattern without value

s7#159 = (???*0* | peg$parsescalar_expression_list())
- *0* s7
  ⚠️  pattern without value

s7#160 = (???*0* | peg$parseand())
- *0* s7
  ⚠️  pattern without value

s7#161 = (???*0* | peg$parsescalar_binary_bitwise_xor_expression())
- *0* s7
  ⚠️  pattern without value

s7#162 = (???*0* | peg$parsescalar_binary_bitwise_and_expression())
- *0* s7
  ⚠️  pattern without value

s7#163 = (???*0* | peg$parsescalar_binary_shift_expression())
- *0* s7
  ⚠️  pattern without value

s7#164 = (???*0* | peg$parsescalar_binary_additive_expression())
- *0* s7
  ⚠️  pattern without value

s7#165 = (???*0* | peg$parsescalar_binary_multiplicative_expression())
- *0* s7
  ⚠️  pattern without value

s7#166 = (???*0* | peg$parsescalar_unary_expression())
- *0* s7
  ⚠️  pattern without value

s7#170 = (
  | ???*0*
  | peg$parseidentifier()
  | peg$parsestring_constant()
  | peg$parseunsigned_integer()
  | peg$parseparameter_name()
)
- *0* s7
  ⚠️  pattern without value

s7#174 = (???*0* | peg$parsescalar_conditional_expression())
- *0* s7
  ⚠️  pattern without value

s7#85 = (???*0* | peg$currPos | s8 | peg$FAILED | null)
- *0* s7
  ⚠️  pattern without value

s7#87 = (???*0* | peg$parseobject_property())
- *0* s7
  ⚠️  pattern without value

s7#88 = (???*0* | peg$parsefrom_source())
- *0* s7
  ⚠️  pattern without value

s7#92 = (???*0* | peg$parsesort_expression())
- *0* s7
  ⚠️  pattern without value

s7#94 = (???*0* | peg$c25 | peg$FAILED | peg$c27)
- *0* s7
  ⚠️  pattern without value

s7#95 = (???*0* | peg$c11 | peg$FAILED)
- *0* s7
  ⚠️  pattern without value

s8#103 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#104 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#152 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#154 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#159 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#160 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#170 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#85 = (???*0* | peg$parsefrom() | peg$c2(s3, s5, s10) | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#94 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s8#95 = (???*0* | peg$parse_())
- *0* s8
  ⚠️  pattern without value

s9#103 = (???*0* | peg$parseconstant())
- *0* s9
  ⚠️  pattern without value

s9#104 = (???*0* | peg$parseobject_constant_property())
- *0* s9
  ⚠️  pattern without value

s9#152 = (???*0* | peg$c38 | peg$FAILED)
- *0* s9
  ⚠️  pattern without value

s9#154 = (???*0* | peg$parsescalar_conditional_expression())
- *0* s9
  ⚠️  pattern without value

s9#159 = (???*0* | peg$c27 | peg$FAILED)
- *0* s9
  ⚠️  pattern without value

s9#160 = (???*0* | peg$parsescalar_binary_bitwise_or_expression())
- *0* s9
  ⚠️  pattern without value

s9#170 = (???*0* | peg$c38 | peg$FAILED)
- *0* s9
  ⚠️  pattern without value

s9#85 = (???*0* | peg$parse_() | peg$currPos | s10 | peg$FAILED | null)
- *0* s9
  ⚠️  pattern without value

s9#94 = (???*0* | peg$parsescalar_expression_list())
- *0* s9
  ⚠️  pattern without value

s9#95 = (???*0* | peg$parsescalar_object_element_property())
- *0* s9
  ⚠️  pattern without value

select#23 = arguments[1]

select#24 = arguments[1]

select#25 = arguments[1]

select#26 = arguments[1]

seq = arguments[0]

source#31 = arguments[0]

source#32 = arguments[0]

startPos = arguments[0]

startPosDetails = peg$computePosDetails(startPos)

subquery = arguments[0]

tail#176 = arguments[1]

tail#30 = arguments[1]

tail#37 = arguments[1]

tail#41 = arguments[1]

tail#45 = arguments[1]

tail#46 = arguments[1]

tail#48 = arguments[1]

tail#59 = arguments[1]

tail#63 = arguments[1]

tail#68 = arguments[1]

tail#72 = arguments[1]

test = arguments[0]

text#20 = (...) => input["substring"](peg$savedPos, peg$currPos)

text#76 = arguments[0]

top#23 = arguments[0]

top#24 = arguments[0]

top#25 = arguments[0]

top#26 = arguments[0]

v#22 = arguments[0]

v#23 = arguments[2]

v#24 = arguments[3]

v#25 = arguments[4]

v#29 = arguments[1]

v#31 = arguments[1]

v#34 = arguments[1]

v#51 = arguments[1]

value#28 = arguments[0]

value#64 = arguments[0]

value#65 = arguments[0]

value#66 = arguments[1]

value#71 = arguments[0]

where#25 = arguments[3]

where#26 = arguments[3]
